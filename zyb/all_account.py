import pandas as pd
from pymongo import MongoClient

client = MongoClient(
    'mongodb://root:Aliyun_Mongo_20250218@dds-2vc3c96a7e797ee41197-pub.mongodb.cn-chengdu.rds.aliyuncs.com:3717,dds-2vc3c96a7e797ee42971-pub.mongodb.cn-chengdu.rds.aliyuncs.com:3717/admin?replicaSet=mgset-1150525521')
db = client['作业帮10']
collection = db['log']

target_dates = ["03-12", "03-13", "03-14"]
phone_numbers = [
    '15683799524', '19115678754', '19123363283', '19922142376', '19922920516', '15608334585', '15696223471',
    '15608315647', '15608306837', '15683502051', '15608375905', '16623736457', '16623498403', '15608376820',
    '15608302784', '15683640270', '15696378457', '15683496194', '15608306437', '15696412946', '15683147593',
    '16623871573', '15608335014', '15608339436', '16623767537', '15696537803', '15683740759', '15696874360',
    '15608335441', '15696064811', '15683308341', '15683662181', '16612380294', '15683713501', '15683109652',
    '15683643501', '15683749803', '15696334261', '15608306380', '15608373291', '15696169864', '15608362174',
    '15608373963', '15608338547', '15696199023', '15696924257', '15696011301', '16623358274', '15683671980',
    '16623421384', '15683347850', '15696375249', '15696736731', '16623768038', '15608375950', '15608306052',
    '15696835031', '16623607741', '15683718312', '16623664284', '15696315052', '15683039884', '15696219215',
    '15608304165', '17392421615', '17391729439', '19309299103', '13335430690', '17349219370', '19329732377',
    '17395637445', '17749287927', '17795704960', '17391043865', '15319819473', '17365690448', '17382668095',
    '13335498489', '17302929239', '18149329684', '17702965801', '17789221407', '18966961459', '15389552767',
    '15389166921', '19916404636', '17749298677', '15319809286', '17791608514', '19991653756', '17392334867',
    '18082504429', '17791619725', '18092148556', '19916236871', '19191726818', '15353392028', '13379573830',
    '17734677298', '17392276516', '17821405956', '18221629441', '15021712594', '18721695748', '15800492294',
    '13761902994', '13761528049', '13761070954', '15900848642', '15001743297', '15921890184', '15021891445',
    '13621860174', '18221040747', '18321849410', '15900744057', '15921046989', '15221368449', '15021787405',
    '15900650740', '15821605346', '15921273427', '18221534165', '15900404261', '15026987247', '13641641952',
    '15900789354', '15800932040', '15021459448', '17821327247', '18717945705', '13764948703', '15026904801',
    '18221718476', '15901664450', '13661779384', '15001751264', '17821216834', '18217415939', '15221696457',
    '18202177591', '15221954730', '15900893493', '13764573609', '13564264038', '15921296415', '15021864240',
    '13564225426', '15221410634', '15221504283', '18221142207', '18217613493', '13564193896', '13764493849',
    '15021479739', '18221577514', '13761622834', '18717907511', '18321078384', '15021880174', '15221984851',
    '13482411394', '13761164312', '18721543751', '18221467469', '15001852542', '13764232692', '13661639124',
    '18217543429', '15026465384', '13764236592', '15900967347', '18221412571', '18721811374', '15900688740',
    '15021790151', '17821344214', '17821273194', '15021514413', '18201756214', '17821977648', '13482251941',
    '18217649783', '18221246485', '13564142709', '13761313942', '15921260541', '13681932674', '15221610942',
    '15221046114', '15900812594', '17821840776', '15021244953', '15002196794', '15800493416', '15900742524',
    '13774493063', '13764150589', '13761964469', '18301956946', '18321055457', '18717819484', '18217164956',
    '18202177609', '18217477263', '13761630492', '18721204915', '13564272910', '13795397740', '15821468935',
    '15221497561', '18321794860', '18321955496', '15921649443', '15900908340', '15021461514', '15021174956',
    '15821267442', '15021360647', '18221343734', '18221584264', '18221417929', '15221958494', '13774329673',
    '13761752334', '15021344351', '13761029542', '13564288209', '13564231336', '18221519940', '13764970536',
    '13482786445', '18217589749', '13761740462', '13701772194', '13764122526', '13764293274', '15921194502',
    '18201721764', '15021279042', '13611817245', '18721919294', '13681959249', '18321064194', '18221134975',
    '15221945978', '13795327461', '13641935605', '18317059475', '13761259417', '18721699472', '18317183034',
    '13564203458', '13681927284', '15921489473', '18721245282', '18202178052', '15121151041', '15021792665',
    '18221843273', '13764878364', '18721284047', '13564117427', '13681954762', '15821397470', '13764121293',
    '18202180956', '15801712394', '13564124474', '18217448104', '15821236492', '15021589845', '15121014772',
    '18221331741', '15801722564', '18202180839', '18217705246', '18721592448', '15201734308', '18202180570',
    '18202177623', '15800453184', '18217440570', '13564272317', '13761642721', '15021583384', '13774229085',
    '13601629480', '15821368451', '18202177629', '15021792618', '15026837294', '13482287736', '15821849631',
    '13761346367', '15900989204', '18221417065', '13764607992', '15801747068', '18221627540', '13774213670',
    '13482675523', '15902194041', '15021790061', '18321175894', '17821228403', '13482624569', '13764929497',
    '18202178732', '18317074284', '15021276472', '18321194104', '18217624950', '18721295944', '15821212504',
    '15021785806', '18202180636', '15821165642', '13764286879', '13564281893', '13764906239', '13761712486',
    '15216840869', '15021785803', '15021792508', '15921073404', '15021785813', '13681934785', '13701958414',
    '15001914534', '13482855304', '15221910494', '15900416131', '13564192903', '15921916964', '15021879247',
    '18202134705', '15214394247', '15214387369', '18202180283', '15921413043', '15001734762', '15021785737',
    '18217793480', '15221664925', '18321143793', '13774293045', '18721659140', '15821621447', '18721511443',
    '13564256096', '15021415794', '18217686439', '15921833461', '15021792319', '15221834093', '13764201684',
    '18221457103', '13564212630', '13636446725', '15921652848', '18717907247', '15821244563', '15801925748',
    '15021683641', '15901841271', '15800532874', '15021734064', '15221271774', '18721083497', '15021759034',
    '15800466709', '15221927354', '17821345310', '15021341754', '13764429498', '15221476017', '15801954751',
    '15921396094', '15801923804', '15026766541', '13761779841', '13701849892', '15001737445', '15901604785',
    '15026910841', '13788971794', '18702127446', '15001938914', '18321748213', '13636437468', '15021646671',
    '18217653754', '18721544359', '13661543889', '15021044740', '15221035424', '15221946434', '18221425916',
    '13764728514', '19260121768', '16623626192', '13671734705', '18301704260', '15021691354', '13701672924',
    '15026484091', '18221456254', '13764435274', '13764647403', '18721231749', '18221394979', '15696164845',
    '15696936125', '15683144220', '15683067125', '15608339341'
]

def get_phone_data(phone_number):
    pipeline = [
        {"$addFields": {"date_part": {"$substr": ["$time", 5, 5]}}},
        {"$match": {"date_part": {"$in": target_dates},
                    "s_video_num": {"$exists": True},
                    "phone": phone_number}},
        {"$group": {"_id": {"date": "$date_part"},
                    "total": {"$sum": 1},
                    "valid": {"$sum": {"$cond": [{"$gt": ["$s_video_num", 0]}, 1, 0]}}}},
        {"$project": {"_id": 0,
                      "日期": "$_id.date",
                      "有效率": {"$concat": [{"$toString": "$valid"}, "/", {"$toString": "$total"}]}}}
    ]
    return list(collection.aggregate(pipeline))

all_data = []
for phone_number in phone_numbers:
    print(f"Processing phone_number: {phone_number}")
    results = get_phone_data(phone_number)
    data = pd.DataFrame(results)
    data['账号'] = phone_number
    all_data.append(data)

df = pd.concat(all_data, ignore_index=True)

# 创建透视表
pivot_table = pd.pivot_table(df, values='有效率', index=['账号'],
                            columns='日期', aggfunc=lambda x: x)
pivot_table.reset_index(inplace=True)
pivot_table.columns.name = None

# 计算汇总数据
summary_data = {'账号': '总计'}
for date in target_dates:
    total_valid = 0
    total_count = 0
    if date in pivot_table.columns:
        for value in pivot_table[date]:
            if pd.isna(value):
                continue
            try:
                valid, total = map(int, value.split('/'))
                total_valid += valid
                total_count += total
            except:
                pass
    summary_data[date] = f"{total_valid}/{total_count}"

# 创建带汇总的DataFrame
empty_rows = pd.DataFrame([{col: '' for col in pivot_table.columns} for _ in range(2)])
summary_df = pd.DataFrame([summary_data])
final_df = pd.concat([pivot_table, empty_rows, summary_df], ignore_index=True)

# 调整列顺序（保持原始顺序）
final_df = final_df[['账号'] + target_dates]

final_df.to_excel('all_phones_message.xlsx', index=False)
print("处理完成，结果已保存到 all_phones_message.xlsx")